{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/context/QuizContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from \"react\";\n\nexport type Quiz = {\n  id: number;\n  question: string;\n  options: string[];\n  correctOptionIndex: number;\n  date: string; // ISO date string\n};\n\ntype QuizContextType = {\n  quizzes: Quiz[];\n  addQuiz: (quiz: Quiz) => void;\n  currentDate: string;\n  canCreateQuiz: boolean;\n};\n\nconst QuizContext = createContext<QuizContextType | undefined>(undefined);\n\nexport const QuizProvider = ({ children }: { children: ReactNode }) => {\n  const [quizzes, setQuizzes] = useState<Quiz[]>([]);\n  const [currentDate, setCurrentDate] = useState<string>(new Date().toISOString().split('T')[0]);\n  const [canCreateQuiz, setCanCreateQuiz] = useState(true);\n\n  // Initialize data from localStorage\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      const storedQuizzes = localStorage.getItem(\"quizzes\");\n      const storedDate = localStorage.getItem(\"currentDate\");\n      \n      if (storedQuizzes) {\n        const parsedQuizzes = JSON.parse(storedQuizzes);\n        setQuizzes(parsedQuizzes);\n      }\n      \n      if (storedDate) {\n        setCurrentDate(storedDate);\n      }\n    }\n  }, []);\n\n  // Update canCreateQuiz whenever quizzes or currentDate changes\n  useEffect(() => {\n    setCanCreateQuiz(!quizzes.some(quiz => quiz.date === currentDate));\n  }, [quizzes, currentDate]);\n\n  // Save to localStorage whenever data changes\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      localStorage.setItem(\"quizzes\", JSON.stringify(quizzes));\n      localStorage.setItem(\"currentDate\", currentDate);\n    }\n  }, [quizzes, currentDate]);\n\n  const addQuiz = (quiz: Quiz) => {\n    if (!canCreateQuiz) {\n      throw new Error(\"Only one quiz can be created per day\");\n    }\n    \n    // Add the quiz\n    setQuizzes((prev) => [...prev, quiz]);\n    \n    // Move the date forward by one day\n    const nextDate = new Date(currentDate);\n    nextDate.setDate(nextDate.getDate() + 1);\n    setCurrentDate(nextDate.toISOString().split('T')[0]);\n  };\n\n  return (\n    <QuizContext.Provider value={{ quizzes, addQuiz, currentDate, canCreateQuiz }}>\n      {children}\n    </QuizContext.Provider>\n  );\n};\n\nexport const useQuiz = (): QuizContextType => {\n  const context = useContext(QuizContext);\n  if (!context) {\n    throw new Error(\"useQuiz must be used within a QuizProvider\");\n  }\n  return context;\n};\n"],"names":[],"mappings":";;;;;AAAA;;;;AAiBA,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,gBAAa,AAAD,EAA+B;AAExD,MAAM,eAAe,CAAC,EAAE,QAAQ,EAA2B;;IAChE,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAU,EAAE;IACjD,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAU,IAAI,OAAO,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE;IAC7F,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAEnD,oCAAoC;IACpC,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;kCAAE;YACR,wCAAmC;gBACjC,MAAM,gBAAgB,aAAa,OAAO,CAAC;gBAC3C,MAAM,aAAa,aAAa,OAAO,CAAC;gBAExC,IAAI,eAAe;oBACjB,MAAM,gBAAgB,KAAK,KAAK,CAAC;oBACjC,WAAW;gBACb;gBAEA,IAAI,YAAY;oBACd,eAAe;gBACjB;YACF;QACF;iCAAG,EAAE;IAEL,+DAA+D;IAC/D,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;kCAAE;YACR,iBAAiB,CAAC,QAAQ,IAAI;0CAAC,CAAA,OAAQ,KAAK,IAAI,KAAK;;QACvD;iCAAG;QAAC;QAAS;KAAY;IAEzB,6CAA6C;IAC7C,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;kCAAE;YACR,wCAAmC;gBACjC,aAAa,OAAO,CAAC,WAAW,KAAK,SAAS,CAAC;gBAC/C,aAAa,OAAO,CAAC,eAAe;YACtC;QACF;iCAAG;QAAC;QAAS;KAAY;IAEzB,MAAM,UAAU,CAAC;QACf,IAAI,CAAC,eAAe;YAClB,MAAM,IAAI,MAAM;QAClB;QAEA,eAAe;QACf,WAAW,CAAC,OAAS;mBAAI;gBAAM;aAAK;QAEpC,mCAAmC;QACnC,MAAM,WAAW,IAAI,KAAK;QAC1B,SAAS,OAAO,CAAC,SAAS,OAAO,KAAK;QACtC,eAAe,SAAS,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE;IACrD;IAEA,qBACE,6LAAC,YAAY,QAAQ;QAAC,OAAO;YAAE;YAAS;YAAS;YAAa;QAAc;kBACzE;;;;;;AAGP;GAtDa;KAAA;AAwDN,MAAM,UAAU;;IACrB,MAAM,UAAU,CAAA,GAAA,6JAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,CAAC,SAAS;QACZ,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT;IANa","debugId":null}},
    {"offset": {"line": 111, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/components/providers/quiz-provider.tsx"],"sourcesContent":["\"use client\";\n\nimport { ReactNode } from 'react';\nimport { QuizProvider as QuizContextProvider } from '../../context/QuizContext';\n\nexport function QuizProvider({ children }: { children: ReactNode }) {\n  return <QuizContextProvider>{children}</QuizContextProvider>;\n}\n"],"names":[],"mappings":";;;;AAGA;AAHA;;;AAKO,SAAS,aAAa,EAAE,QAAQ,EAA2B;IAChE,qBAAO,6LAAC,iIAAA,CAAA,eAAmB;kBAAE;;;;;;AAC/B;KAFgB","debugId":null}}]
}